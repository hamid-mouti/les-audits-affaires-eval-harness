name: 🏷️ Auto Version & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  PYTHON_VERSION: "3.9"

jobs:
  # Determine version bump type from commit messages
  analyze-commits:
    name: 📊 Analyze Commits
    runs-on: ubuntu-latest
    outputs:
      version_type: ${{ steps.version.outputs.version_type }}
      should_release: ${{ steps.version.outputs.should_release }}
      current_version: ${{ steps.version.outputs.current_version }}
      new_version: ${{ steps.version.outputs.new_version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for commit analysis
        
    - name: 🔍 Analyze commit messages
      id: version
      run: |
        # Get current version from pyproject.toml
        current_version=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        
        # Get commits since last tag (or all commits if no tags)
        last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$last_tag" ]; then
          commits=$(git log --oneline --pretty=format:"%s")
        else
          commits=$(git log ${last_tag}..HEAD --oneline --pretty=format:"%s")
        fi
        
        echo "Analyzing commits since ${last_tag:-'beginning'}:"
        echo "$commits"
        
        # Determine version bump type based on conventional commits
        version_type="none"
        should_release="false"
        
        # Check for breaking changes (major version)
        if echo "$commits" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?!:"; then
          version_type="major"
          should_release="true"
        # Check for BREAKING CHANGE in commit body
        elif git log ${last_tag:-$(git rev-list --max-parents=0 HEAD)}..HEAD --pretty=format:"%B" | grep -q "BREAKING CHANGE"; then
          version_type="major"
          should_release="true"
        # Check for new features (minor version)
        elif echo "$commits" | grep -qE "^feat(\(.+\))?:"; then
          version_type="minor"
          should_release="true"
        # Check for bug fixes, docs, etc. (patch version)
        elif echo "$commits" | grep -qE "^(fix|docs|style|refactor|perf|test)(\(.+\))?:"; then
          version_type="patch"
          should_release="true"
        # Check for manual trigger
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          version_type="${{ github.event.inputs.version_type }}"
          should_release="true"
        fi
        
        # Calculate new version
        IFS='.' read -r major minor patch <<< "$current_version"
        case $version_type in
          major)
            new_version="$((major + 1)).0.0"
            ;;
          minor)
            new_version="${major}.$((minor + 1)).0"
            ;;
          patch)
            new_version="${major}.${minor}.$((patch + 1))"
            ;;
          *)
            new_version="$current_version"
            ;;
        esac
        
        echo "version_type=$version_type" >> $GITHUB_OUTPUT
        echo "should_release=$should_release" >> $GITHUB_OUTPUT
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        
        echo "📊 Analysis Results:"
        echo "  Current version: $current_version"
        echo "  Version bump type: $version_type"
        echo "  New version: $new_version"
        echo "  Should release: $should_release"

  # Bump version and create release
  release:
    name: 🚀 Version Bump & Release
    runs-on: ubuntu-latest
    needs: [analyze-commits]
    if: needs.analyze-commits.outputs.should_release == 'true'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 🏷️ Update version in pyproject.toml
      run: |
        current_version="${{ needs.analyze-commits.outputs.current_version }}"
        new_version="${{ needs.analyze-commits.outputs.new_version }}"
        
        echo "Updating version from $current_version to $new_version"
        sed -i "s/version = \"$current_version\"/version = \"$new_version\"/" pyproject.toml
        
        # Verify the change
        grep "version = \"$new_version\"" pyproject.toml
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Get commits since last tag for changelog
        last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$last_tag" ]; then
          commits=$(git log --oneline --pretty=format:"- %s (%h)")
        else
          commits=$(git log ${last_tag}..HEAD --oneline --pretty=format:"- %s (%h)")
        fi
        
        # Create changelog
        cat > RELEASE_NOTES.md << EOF
        ## Version ${{ needs.analyze-commits.outputs.new_version }}
        
        ### Changes
        $commits
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${last_tag}...v${{ needs.analyze-commits.outputs.new_version }}
        EOF
        
        # Also append to CHANGELOG.md if it exists
        if [ -f CHANGELOG.md ]; then
          cat RELEASE_NOTES.md CHANGELOG.md > CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md
        fi
        
    - name: 💾 Commit version bump
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add pyproject.toml
        if [ -f CHANGELOG.md ]; then
          git add CHANGELOG.md
        fi
        
        git commit -m "🔖 Bump version to ${{ needs.analyze-commits.outputs.new_version }}"
        git tag -a "v${{ needs.analyze-commits.outputs.new_version }}" -m "Release v${{ needs.analyze-commits.outputs.new_version }}"
        
    - name: 📤 Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}
        branch: main
        tags: true
        
    - name: 📦 Build package
      run: |
        python -m build
        
    - name: 🔍 Check package
      run: |
        twine check dist/*
        
    - name: 🚀 Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        
    - name: 📢 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AUTO_VERSION_TOKEN }}
      with:
        tag_name: v${{ needs.analyze-commits.outputs.new_version }}
        release_name: Release v${{ needs.analyze-commits.outputs.new_version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  # Notify about the release
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [analyze-commits, release]
    if: needs.analyze-commits.outputs.should_release == 'true'
    
    steps:
    - name: 📊 Release Summary
      run: |
        echo "## 🎉 New Release Created!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Previous Version | ${{ needs.analyze-commits.outputs.current_version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| New Version | ${{ needs.analyze-commits.outputs.new_version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Version Type | ${{ needs.analyze-commits.outputs.version_type }} |" >> $GITHUB_STEP_SUMMARY
        echo "| PyPI Package | [les-audits-affaires-eval-harness](https://pypi.org/project/les-audits-affaires-eval-harness/) |" >> $GITHUB_STEP_SUMMARY
        echo "| GitHub Release | [v${{ needs.analyze-commits.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.analyze-commits.outputs.new_version }}) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Installation:** \`pip install les-audits-affaires-eval-harness==${{ needs.analyze-commits.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY 